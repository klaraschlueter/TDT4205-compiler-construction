We assume:
- call and return handle pushing and poping the return address and do the jumping
- that we call a function by "call f, n" where f is the name of the label and n is the number of parameters pushed to the stack

TODOs:
- find out about function declarations:
  do we need to assign space as in https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/handouts/240%20TAC%20Examples.pdf ?

func catalan( n )
begin
    print factorial(2*n) / (factorial(n+1)*factorial(n))
    return 0
end

func factorial( n )
begin
    var i, result
    result := 1
    i := 1
    while i < (n+1) do
    begin
        result *= i
        i += 1
    end
    return result
end


Lcatalan:
    
    param n;
    t8 = call Lfactorial, 1;

    t9 = 1;
    t10 = n + t9;
    param t10;
    t11 = call Lfactorial, 1;

    t12 = t11*t8;

    t13 = 2;
    t14 = n * t13;
    param t14;
    t15 = call Lfactorial, 1;

    t16 = t15 / t12;

    param t16;
    call print, 1;
    return 0;


func catalan( n )
begin
    print factorial(2*n) / (factorial(n+1)*factorial(n))
    return 0
end

Lfactorial:
    t0 = 1;
    result = t0;
    t1 = 1;
    i = t1;
Lwhile:
    t2 = 1;
    t3 = n + t2;
    t4 = i < t3;
    ifFalse t4 goto L2;
    t5 = result*i;
    result = t5;
    t6 = 1;
    t7 = i + t6;
    i = t7;
    jump Lwhile;
Lendwhile:
    return result;